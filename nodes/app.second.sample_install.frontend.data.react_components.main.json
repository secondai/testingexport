{
  "name": "app.second.sample_install.frontend.data.react_components.main",
  "type": "types.second.default.code.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n  \n      console.log('---Main Component---');\n      \n      let sleep = function(ms){\n        return new Promise((resolve,reject)=>{\n          universe.setTimeout(resolve,ms);\n        })\n      }\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      let ErrorComponent = (name) => {\n        return class ErrorComponent extends React.Component {\n          constructor(props){\n            super(props);\n          }\n          render(){\n            return (\n              <div>\n                ErrorLoading from Main: {name || 'unknown'}\n              </div>\n            )\n          }\n        }\n      }\n      \n      let LoadingComponent = (name) => {\n        return class LoadingComponent extends React.Component {\n          constructor(props){\n            super(props);\n          }\n          render(){\n            return (\n              <div>Loading Component: {name}</div>\n            )\n          }\n        }\n      }\n      \n            \n      const loadComponentsHoC = (WrappedComponent, componentArray) => {\n        return class loadComponentsHoC extends React.Component {\n          constructor(props){\n            super(props);\n            let stateObj = {};\n            for(let componentPath of componentArray){\n              let k = componentPath.split('.').pop();\n              stateObj[k] = LoadingComponent(componentPath);\n            }\n            this.state = stateObj;\n          }\n        \n          componentDidMount(){\n            this.loadComponents();\n            universe.EE.on('react-nodes-modified', this.loadComponents);\n          }\n          \n          componentWillUnmount(){\n            universe.EE.removeListener('react-nodes-modified', this.loadComponents);\n          }\n          \n          @autobind\n          async loadComponents(){\n            \n            for(let componentPath of componentArray){\n              let obj = {};\n              let k = componentPath.split('.').pop();\n              try {\n                console.log('Getting component:', componentPath);\n                let Component = await universe.getNode(componentPath);\n                Component = await universe.runInVM(Component,{});\n                obj[k] = Component.data;\n                this.setState(obj)\n                // console.log(componentInternalId,Component);\n                \n              }catch(err){\n                console.error(\"Failed loading component:\", err);\n                obj[k] = ErrorComponent(componentPath);\n                this.setState(obj);\n              }\n            }\n            \n          }\n      \n          render() {\n            // const { Second, updateAuth } = this.context\n            return (\n              <WrappedComponent {...this.props} LocalComponent={this.state}/>\n            )\n          }\n        }\n      }\n      \n      universe.sharedComponents.loadComponentsHoC = loadComponentsHoC;\n      \n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props);\n          \n          WINDOW.appBaseUrl = WINDOW.appBaseUrl || '/deveditor';\n          \n          this.state = {\n            checkedLogin: false\n          }\n          \n        }\n        \n        componentDidMount(){\n          this.startUp();\n        }\n        \n        @autobind\n        async startUp(){\n          \n          await this.checkLogin();\n          \n          // if identity includes a logged-in profile\n          // - show the main page \n          // - else: \n          //   - see if hash exists in url (token, after login) \n          //   - redirect to login if no hash to process\n          \n          console.log('MainComponent loaded ok');\n        \n        }\n        \n        @autobind\n        async checkLogin(){\n          \n          // TODO: check for update to auth \n          console.log('Hash:', WINDOW.location.hash);\n          \n          let hashQs = parseQueryString(WINDOW.location.hash.substring(1));\n          \n          console.log('hashQs:', hashQs);\n          \n          \n          let token,\n            authInfo;\n          \n          if(hashQs.token){\n            // set token \n            token = hashQs.token;\n            WINDOW.localStorage.setItem('token', token);\n            \n            // // RELOAD PAGE (without hash) \n            WINDOW.location.hash = '';\n            // WINDOW.location = WINDOW.location.href.split('#')[0];\n            // return;\n          } else {\n            token = WINDOW.localStorage.getItem('token');\n            if(token){\n              try {\n                authInfo = WINDOW.localStorage.getItem('authInfo');\n                authInfo = JSON.parse(authInfo);\n              }catch(err){\n                console.error('failed loading authInfo:', err);\n                token = null;\n              }\n            }\n          }\n          \n          console.log('Auth Token:', token);\n          this.props.setState({token});\n          \n          this.setState({checkedLogin: true});\n          \n        }\n        \n        render(){\n          \n          let LocalComponent = this.props.LocalComponent;\n          \n          // if(this.state.renderLogin){\n          //   return this.renderLoginComponent();\n          // }\n          // console.log('Rendering main', WINDOW.appBaseUrl, Component_default_layout);\n          // console.log('WINDOW:', Component_developer_window, this.state);\n          \n          if(!this.state.checkedLogin){\n            console.log('Rendering empty box while checking login');\n            return (<div></div>)\n          }\n          \n          // logged in? \n          if(!this.props.state.token){\n            return (\n              <Router basename={WINDOW.appBaseUrl}>\n                <Switch>\n                  <LocalComponent.default_layout path=\"/\" component={LocalComponent.login} />\n                </Switch>\n              </Router>\n            )\n          }\n          \n          return (\n            <Router basename={WINDOW.appBaseUrl}>\n              <Switch>\n              \n                <LocalComponent.default_layout exact path=\"/\" component={LocalComponent.test_window} />\n                \n                {/* Fallback (404) */}\n                <LocalComponent.default_layout path=\"/\" component={LocalComponent['404']} />\n                \n              </Switch>\n            </Router>\n          )\n        }\n      }\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      mycomponent = universe.sharedComponents.loadComponentsHoC(mycomponent,[\n        'data.react_components.main.login',\n        'data.react_components.main.default_layout',\n        'data.react_components.main.test_window',\n        'data.react_components.main.404'\n      ]);\n      \n      resolve({\n        type: 'types.second.default.react_component',\n        data: mycomponent\n      });\n      \n      \n      function parseQueryString( queryString ) {\n          var params = {}, queries, temp, i, l;\n          // Split into key/value pairs\n          queries = queryString.split(\"&\");\n          // Convert the array of strings into an object\n          for ( i = 0, l = queries.length; i < l; i++ ) {\n              temp = queries[i].split('=');\n              params[temp[0]] = temp[1];\n          }\n          return params;\n      };\n      \n    }catch(err){\n      console.error(SELF.name, err);\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-02T22:50:02.122Z",
  "updatedAt": "2019-03-06T01:28:29.278Z",
  "nodes": []
}