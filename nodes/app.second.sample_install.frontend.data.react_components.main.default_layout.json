{
  "name": "app.second.sample_install.frontend.data.react_components.main.default_layout",
  "type": "types.second.default.react_component.js",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve,reject)=>{\n    try {\n      \n      const AceEditor = universe.AceEditor;\n      const ReactResizeDetector = universe.ReactResizeDetector;\n      const RecreateChildOnPropsChange = universe.RecreateChildOnPropsChange;\n      \n      const Router = universe.ReactRouterDomRouter;\n      const Route = universe.ReactRouterDomRoute;\n      const Switch = universe.ReactRouterDomSwitch;\n      \n      const Link = universe.ReactRouterDomLink;\n      \n      class EmbeddedComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        \n        render(){\n          return (\n            <div>\n              embeddedComponenthere\n            </div>\n          )\n        }\n      }\n      \n      class ErrorComponent extends React.Component {\n        constructor(props){\n          super(props);\n        }\n        render(){\n          return (\n            <div>\n              ErrorLoading\n            </div>\n          )\n        }\n      }\n      \n      \n      class mycomponent extends React.Component {\n        constructor(props){\n          super(props)\n          this.state = {};\n          \n          WINDOW.UpdateApp = this.handleUpdateApp;\n          // WINDOW.UpdateAppRemote = this.handleUpdateRemote;\n          \n          console.log('DefaultLayout init');\n          \n        }\n        \n        @autobind\n        async handleUpdateApp(){\n          let nodes = await universe.findNodes({});\n          console.log('all nodes', nodes);\n          \n          // delete \"data\" and \"services\" prefixes/nodes \n          await universe.removeNode('data');\n          await universe.removeNode('services');\n          \n          // re-get from whatever was passed in \n          \n          // second-hosted app url \n          // - NOT zipped! \n          let response = await universe.fetch(WINDOW.limitedToAppZip, {\n            // mode: 'no-cors' \n          })\n          \n          console.log('Response:', response);\n          \n          let appNodeList = await response.json();\n          \n          console.log('new appNodeList', appNodeList);\n  \n          // save all new \n          \n          for(let node of appNodeList){\n            await universe.putNode(node.name, node);\n            // await saveChildNodes(node._id, node.nodes);\n          }\n          \n          try {\n            universe.EE.emit('react-nodes-modified', '');\n          }catch(err){\n            console.error(err);\n          }\n          \n          \n        }\n        \n        @autobind\n        handleLogout(){\n          window.localStorage.setItem('token', '');\n          window.location.reload();\n        }\n        \n        @autobind\n        async handleTest(){\n          \n          const rawResponse = await fetch('/ai', {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              type: 'types.second.default.request.input',\n              data: {\n                auth: {\n                  token: this.props.state.token\n                },\n                serviceName: 'services.second.default.get',\n                actionPath: 'app.second.blog',\n                inputNode: {},\n                extras: {}\n              }\n            })\n          });\n          const content = await rawResponse.json();\n          \n          console.log('Content from Second:', content);\n          \n        }\n      \n        render(){\n          const { component: Component, ...rest } = this.props;\n          \n          return (\n            <Route {...rest} render={matchProps => (\n                \n              <div className=\"full-screen\">\n                <div className=\"flex-header\">\n                  \n                  <nav className=\"navbar is-transparent\" style={{zIndex:1}}>\n                    <div className=\"navbar-brand\">\n                      <Link className=\"navbar-item\" to=\"/\">\n                        <h1 className=\"title is-4 truncate\" style={{width:\"350px\"}}>\n                          Testing App Install/Service\n                        </h1>\n                      </Link>\n                      <div className=\"navbar-burger burger\" data-target=\"navbarExampleTransparentExample\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                      </div>\n                    </div>\n                  \n                    <div id=\"navbarExampleTransparentExample\" className=\"navbar-menu\">\n                      <div className=\"navbar-start\">\n                      \n                        {/*\n                        <Link className=\"navbar-item\" to=\"/raw\">\n                          Raw Request\n                        </Link>\n                        */}\n                        \n                      </div>\n                      <div className=\"navbar-end\">\n                      \n                        <div className=\"navbar-item dropdown is-hoverable is-right\">\n                          <div className=\"dropdown-trigger\">\n                                                    \n                            <button className={\"button is-small\" + ((this.props.state.updatingLocal || this.props.state.updatingRemote) ? ' is-loading':'')}>\n                              <span>\n                              \n                                {/*\n                                  !username ? 'Loading User':\n                                  <span>\n                                    {username}\n                                  </span>\n                                */}\n                                \n                              </span>\n                              <span className=\"icon is-small\">\n                                <i className=\"fa fa-angle-down\"></i>\n                              </span>\n                            </button>\n                          </div>\n                          <div className=\"dropdown-menu\" style={{top:\"0px\"}}>\n                            <div className=\"dropdown-content\">\n                              \n                              <a className=\"dropdown-item\" onClick={this.handleTest}>\n                                Test\n                              </a>\n                              \n                              <a className=\"dropdown-item\" onClick={this.handleUpdateApp}>\n                                Update App\n                              </a>\n                              \n                              <div className='dropdown-divider'></div>\n                              \n                              <a className=\"dropdown-item\" onClick={this.handleLogout}>\n                                Logout\n                              </a>\n                              \n                              {/*\n                              <Link className=\"dropdown-item\" to='/logout'>\n                                Logout\n                              </Link>\n                              */}\n                              \n                              \n                            </div>\n                          </div>\n                        </div>\n                          \n                      </div>\n                    </div>\n                    \n                  </nav>\n                  \n                </div>\n                \n                <Component {...matchProps} />\n                \n                <div className=\"flex-footer\">\n                  &nbsp;\n                </div>\n                \n                <ReactResizeDetector handleWidth handleHeight onResize={(w,h)=>this.props.setState({newWindowSize:[w,h]})} />\n                \n                \n              </div>\n              \n            )} />\n          )\n        }\n      };\n      \n      mycomponent = universe.ReactGlobalState(mycomponent);\n      mycomponent = universe.ReactHelpers(mycomponent);\n      \n      resolve({\n        type: 'types.second.default.react_component',\n        data: mycomponent\n      });\n      \n    }catch(err){\n      reject({\n        ERROR: true, \n        err: err.toString()\n      });\n    }\n    \n  })\n\n  \n})()"
  },
  "blobdata": null,
  "createdAt": "2019-03-02T22:50:02.665Z",
  "updatedAt": "2019-03-02T22:53:05.925Z",
  "nodes": []
}