{"version":3,"sources":["Calculator.js","App.js","index.js"],"names":["KeyboardInput","handleKeyDown","event","_this","props","onKeyDown","document","addEventListener","this","removeEventListener","React","Component","CalculatorDisplay","context","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTextLayout","e","_e$nativeEvent$layout","nativeEvent","layout","width","x","newScale","setState","scale","state","value","language","navigator","formattedValue","parseFloat","toLocaleString","useGrouping","maximumFractionDigits","trailingZeros","match","react_default","a","createElement","View","style","calculatorDisplayStyles","root","Text","children","onLayout","text","transform","StyleSheet","create","backgroundColor","flex","justifyContent","alignSelf","color","fontSize","fontWeight","fontFamily","paddingHorizontal","right","transformOrigin","CalculatorKey","_this$props","onPress","textStyle","TouchableHighlight","accessibilityRole","calculatorKeyStyles","underlayColor","height","borderTopWidth","borderTopColor","borderTopStyle","borderRightWidth","borderRightColor","borderRightStyle","outline","lineHeight","textAlign","CalculatorOperations","/","prevValue","nextValue","*","+","-","=","DigitKey","Calculator_CalculatorKey","assign","calculatorStyles","digitKey","digitKeyText","FunctionKey","functionKey","functionKeyText","OperatorKey","operatorKey","operatorKeyText","boxShadow","keypad","flexDirection","inputKeys","calculatorKeyText","functionKeys","backgroundImage","digitKeys","flexWrap","operatorKeys","keyMultiplyText","key0","paddingLeft","keyDot","overflow","keyDotText","marginTop","App","handleTouchStart","touches","length","window","checkLatestVersion","handleTouchEnd","last","setInterval","lastCheck","now","Date","elapsed","alignItems","onTouchStart","onTouchEnd","onTouchCancel","TextInput","autoFocus","multiline","accessibilityLabel","container","console","log","VersionFile","localVersion","version","fetch","then","response","json","remoteVersion","alert","localStorage","setItem","location","reload","AppRegistry","registerComponent","runApplication","rootTag","getElementById"],"mappings":"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","file":"static/js/main.abf25c33.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-bind, react/prop-types */\n\n// React Native version of https://codepen.io/mjijackson/pen/xOzyGX\nimport React from 'react';\nimport { StyleSheet, Text, TouchableHighlight, View } from 'react-native';\n\n/**\n * KeyboardInput\n */\nclass KeyboardInput extends React.Component {\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  render() {\n    return null;\n  }\n\n  handleKeyDown = event => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n  };\n}\n\n/**\n * CalculatorDisplay\n */\nclass CalculatorDisplay extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      scale: 1\n    };\n  }\n\n  handleTextLayout = e => {\n    const { width, x } = e.nativeEvent.layout;\n    const maxWidth = width + x;\n    const newScale = maxWidth / width;\n    if (x < 0) {\n      this.setState({ scale: newScale });\n    } else if (x > width) {\n      this.setState({ scale: 1 });\n    }\n  };\n\n  render() {\n    const { value } = this.props;\n    const { scale } = this.state;\n\n    const language = navigator.language || 'en-US';\n    let formattedValue = parseFloat(value).toLocaleString(language, {\n      useGrouping: true,\n      maximumFractionDigits: 6\n    });\n\n    const trailingZeros = value.match(/\\.0*$/);\n\n    if (trailingZeros) {\n      formattedValue += trailingZeros;\n    }\n\n    return (\n      <View style={calculatorDisplayStyles.root}>\n        <Text\n          children={formattedValue}\n          onLayout={this.handleTextLayout}\n          style={[calculatorDisplayStyles.text, { transform: [{ scale }] }]}\n        />\n      </View>\n    );\n  }\n}\n\nconst calculatorDisplayStyles = StyleSheet.create({\n  root: {\n    backgroundColor: '#1c191c',\n    flex: 1,\n    justifyContent: 'center'\n  },\n  text: {\n    alignSelf: 'flex-end',\n    color: 'white',\n    //lineHeight: 130,\n    fontSize: '5.25em',\n    fontWeight: '100',\n    fontFamily: 'Roboto, sans-serif',\n    paddingHorizontal: 30,\n    //position: 'absolute',\n    right: 0,\n    transformOrigin: 'right'\n  }\n});\n\n/**\n * CalculatorKey\n */\nclass CalculatorKey extends React.Component {\n  render() {\n    const { children, onPress, style, textStyle } = this.props;\n\n    return (\n      <TouchableHighlight\n        accessibilityRole=\"button\"\n        onPress={onPress}\n        style={[calculatorKeyStyles.root, style]}\n        underlayColor=\"rgba(0,0,0,0.25)\"\n      >\n        <Text children={children} style={[calculatorKeyStyles.text, textStyle]} />\n      </TouchableHighlight>\n    );\n  }\n}\n\nconst calculatorKeyStyles = StyleSheet.create({\n  root: {\n    width: 80,\n    height: 80,\n    borderTopWidth: 1,\n    borderTopColor: '#777',\n    borderTopStyle: 'solid',\n    borderRightWidth: 1,\n    borderRightColor: '#666',\n    borderRightStyle: 'solid',\n    outline: 'none'\n  },\n  text: {\n    fontWeight: '100',\n    fontFamily: 'Roboto, sans-serif',\n    lineHeight: 80,\n    textAlign: 'center'\n  }\n});\n\nconst CalculatorOperations = {\n  '/': (prevValue, nextValue) => prevValue / nextValue,\n  '*': (prevValue, nextValue) => prevValue * nextValue,\n  '+': (prevValue, nextValue) => prevValue + nextValue,\n  '-': (prevValue, nextValue) => prevValue - nextValue,\n  '=': (prevValue, nextValue) => nextValue\n};\n\n/**\n * Calculator\n */\nclass Calculator extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      value: null,\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false\n    };\n  }\n\n  clearAll() {\n    this.setState({\n      value: null,\n      displayValue: '0',\n      operator: null,\n      waitingForOperand: false\n    });\n  }\n\n  clearDisplay() {\n    this.setState({\n      displayValue: '0'\n    });\n  }\n\n  clearLastChar() {\n    const { displayValue } = this.state;\n\n    this.setState({\n      displayValue: displayValue.substring(0, displayValue.length - 1) || '0'\n    });\n  }\n\n  toggleSign() {\n    const { displayValue } = this.state;\n    const newValue = parseFloat(displayValue) * -1;\n\n    this.setState({\n      displayValue: String(newValue)\n    });\n  }\n\n  inputPercent() {\n    const { displayValue } = this.state;\n    const currentValue = parseFloat(displayValue);\n\n    if (currentValue === 0) return;\n\n    const fixedDigits = displayValue.replace(/^-?\\d*\\.?/, '');\n    const newValue = parseFloat(displayValue) / 100;\n\n    this.setState({\n      displayValue: String(newValue.toFixed(fixedDigits.length + 2))\n    });\n  }\n\n  inputDot() {\n    const { displayValue } = this.state;\n\n    if (!/\\./.test(displayValue)) {\n      this.setState({\n        displayValue: displayValue + '.',\n        waitingForOperand: false\n      });\n    }\n  }\n\n  inputDigit(digit) {\n    const { displayValue, waitingForOperand } = this.state;\n\n    if (waitingForOperand) {\n      this.setState({\n        displayValue: String(digit),\n        waitingForOperand: false\n      });\n    } else {\n      this.setState({\n        displayValue: displayValue === '0' ? String(digit) : displayValue + digit\n      });\n    }\n  }\n\n  performOperation(nextOperator) {\n    const { value, displayValue, operator } = this.state;\n    const inputValue = parseFloat(displayValue);\n\n    if (value == null) {\n      this.setState({\n        value: inputValue\n      });\n    } else if (operator) {\n      const currentValue = value || 0;\n      const newValue = CalculatorOperations[operator](currentValue, inputValue);\n\n      this.setState({\n        value: newValue,\n        displayValue: String(newValue)\n      });\n    }\n\n    this.setState({\n      waitingForOperand: true,\n      operator: nextOperator\n    });\n  }\n\n  handleKeyDown(event) {\n    let { key } = event;\n\n    if (key === 'Enter') key = '=';\n\n    if (/\\d/.test(key)) {\n      event.preventDefault();\n      this.inputDigit(parseInt(key, 10));\n    } else if (key in CalculatorOperations) {\n      event.preventDefault();\n      this.performOperation(key);\n    } else if (key === '.') {\n      event.preventDefault();\n      this.inputDot();\n    } else if (key === '%') {\n      event.preventDefault();\n      this.inputPercent();\n    } else if (key === 'Backspace') {\n      event.preventDefault();\n      this.clearLastChar();\n    } else if (key === 'Clear') {\n      event.preventDefault();\n\n      if (this.state.displayValue !== '0') {\n        this.clearDisplay();\n      } else {\n        this.clearAll();\n      }\n    }\n  }\n\n  render() {\n    const { displayValue } = this.state;\n\n    const clearDisplay = displayValue !== '0';\n    const clearText = clearDisplay ? 'C' : 'AC';\n\n    return (\n      <View style={calculatorStyles.root}>\n        <KeyboardInput onKeyDown={event => this.handleKeyDown(event)} />\n        <CalculatorDisplay value={displayValue} />\n        <View style={calculatorStyles.keypad}>\n          <View style={calculatorStyles.inputKeys}>\n            <View style={calculatorStyles.functionKeys}>\n              <FunctionKey onPress={() => (clearDisplay ? this.clearDisplay() : this.clearAll())}>\n                {clearText}\n              </FunctionKey>\n              <FunctionKey onPress={() => this.toggleSign()} style={calculatorStyles.keySign}>\n                ±\n              </FunctionKey>\n              <FunctionKey onPress={() => this.inputPercent()} style={calculatorStyles.keyPercent}>\n                %\n              </FunctionKey>\n            </View>\n            <View style={calculatorStyles.digitKeys}>\n              <DigitKey\n                onPress={() => this.inputDigit(0)}\n                style={calculatorStyles.key0}\n                textStyle={{ textAlign: 'left' }}\n              >\n                0\n              </DigitKey>\n              <DigitKey\n                onPress={() => this.inputDot()}\n                style={calculatorStyles.keyDot}\n                textStyle={calculatorStyles.keyDotText}\n              >\n                .\n              </DigitKey>\n              <DigitKey onPress={() => this.inputDigit(1)}>1</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(2)}>2</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(3)}>3</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(4)}>4</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(5)}>5</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(6)}>6</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(7)}>7</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(8)}>8</DigitKey>\n              <DigitKey onPress={() => this.inputDigit(9)}>9</DigitKey>\n            </View>\n          </View>\n          <View style={calculatorStyles.operatorKeys}>\n            <OperatorKey onPress={() => this.performOperation('/')}>÷</OperatorKey>\n            <OperatorKey onPress={() => this.performOperation('*')}>×</OperatorKey>\n            <OperatorKey onPress={() => this.performOperation('-')}>−</OperatorKey>\n            <OperatorKey onPress={() => this.performOperation('+')}>+</OperatorKey>\n            <OperatorKey onPress={() => this.performOperation('=')}>=</OperatorKey>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst DigitKey = props => (\n  <CalculatorKey\n    {...props}\n    style={[calculatorStyles.digitKey, props.style]}\n    textStyle={[calculatorStyles.digitKeyText, props.textStyle]}\n  />\n);\n\nconst FunctionKey = props => (\n  <CalculatorKey\n    {...props}\n    style={[calculatorStyles.functionKey, props.style]}\n    textStyle={[calculatorStyles.functionKeyText, props.textStyle]}\n  />\n);\n\nconst OperatorKey = props => (\n  <CalculatorKey\n    {...props}\n    style={[calculatorStyles.operatorKey, props.style]}\n    textStyle={[calculatorStyles.operatorKeyText, props.textStyle]}\n  />\n);\n\nconst calculatorStyles = StyleSheet.create({\n  root: {\n    width: 320,\n    height: 520,\n    backgroundColor: 'black',\n    boxShadow: '0px 0px 20px 0px #aaa'\n  },\n  keypad: {\n    height: 400,\n    flexDirection: 'row'\n  },\n  inputKeys: {\n    width: 240\n  },\n  calculatorKeyText: {\n    fontFamily: 'Roboto, sans-serif',\n    fontSize: '1.75em',\n    fontWeight: '100'\n  },\n  functionKeys: {\n    backgroundImage: 'linear-gradient(to bottom, rgba(202,202,204,1) 0%, rgba(196,194,204,1) 100%)',\n    flexDirection: 'row'\n  },\n  functionKeyText: {\n    fontFamily: 'Roboto, sans-serif',\n    fontSize: '1.75em',\n    fontWeight: '100'\n  },\n  digitKeys: {\n    backgroundColor: '#e0e0e7',\n    flexDirection: 'row',\n    flexWrap: 'wrap-reverse'\n  },\n  digitKeyText: {\n    fontFamily: 'Roboto, sans-serif',\n    fontSize: '2em',\n    fontWeight: '100'\n  },\n  operatorKeys: {\n    backgroundImage: 'linear-gradient(to bottom, rgba(252,156,23,1) 0%, rgba(247,126,27,1) 100%)'\n  },\n  operatorKey: {\n    borderRightWidth: 0\n  },\n  operatorKeyText: {\n    color: 'white',\n    fontFamily: 'Roboto, sans-serif',\n    fontSize: '2.65em',\n    fontWeight: '100'\n  },\n  keyMultiplyText: {\n    lineHeight: 50\n  },\n  key0: {\n    paddingLeft: 32,\n    width: 160\n  },\n  keyDot: {\n    overflow: 'hidden'\n  },\n  keyDotText: {\n    fontFamily: 'Roboto, sans-serif',\n    fontSize: '4.375em',\n    fontWeight: '100',\n    marginTop: -10\n  }\n});\n\nexport default Calculator;","\nimport Calculator from './Calculator';\nimport React from 'react';\nimport { Text, TextInput, StyleSheet, View } from 'react-native';\n\n// const App = () => (\n//   <View style={styles.container}>\n//     <Calculator />\n//   </View>\n// );\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      last: 0,\n      touches: 0\n    }\n    window.setInterval(()=>{\n      this.setState({\n        last: window.lastCheck,\n        now: Date.now(),\n        elapsed: (Date.now() - window.lastCheck)\n      });\n    },1000)\n  }\n\n  handleTouchStart = (e) => {\n    this.setState({touches: e.touches.length});\n    if(e.touches.length >= 3){\n      window.checkLatestVersion();\n    }\n  }\n  handleTouchEnd = (e) => {\n    this.setState({touches: e.touches.length});\n    // state=>{\n    //   return {\n    //     touches: state.touches - 1\n    //   }\n    // })\n  }\n  render() {\n    return (\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }} onTouchStart={this.handleTouchStart} onTouchEnd={this.handleTouchEnd} onTouchCancel={this.handleTouchEnd}>\n        <Text>Hello World! (2)</Text>\n        <TextInput\n          autoFocus={true}\n          multiline={true}\n          accessibilityLabel=\"I am the accessibility label for text input\"\n        />\n      </View>\n    )\n  }\n}\n\n\nconst styles = StyleSheet.create({\n  container: { alignItems: 'center', justifyContent: 'center', flex: 1 }\n});\n\nexport default App","import { AppRegistry } from \"react-native\";\nimport App from \"./App\";\n\nimport VersionFile from './version.json'\n\nconsole.log('Local VersionFile', VersionFile);\nlet versionTag = 'app.second.sample_pwa.version';\nwindow.localVersion = VersionFile.version; //localStorage.getItem(versionTag);\nwindow.lastCheck = 0;\n\nwindow.checkLatestVersion = function(){\n  if((Date.now() - window.lastCheck) < (10 * 1000)){\n    window.console.log('Too soon to checkLatestVersion');\n    return;\n  }\n  window.lastCheck = Date.now();\n  // window.alert('checking for update');\n  fetch('/app/app.second.sample_pwa/version.json?' + Date.now())\n  .then(response=>{\n    return response.json();\n  })\n  .then((remoteVersion)=>{\n    window.console.log('Remote Version:', remoteVersion)\n    window.remoteVersion = remoteVersion.version;\n    // window.location.reload(true)\n    // let localVal = localStorage.getItem('test123479');\n    // window.alert(['NEW:', text, 'localVersion:', localVersion].join(\"\\n\"));\n    if(!window.localVersion){\n      // set first time \n      localStorage.setItem(versionTag, window.remoteVersion);\n    } else if(window.localVersion != window.remoteVersion){\n      // afterwards \n      window.alert('Updating...')\n      localStorage.setItem(versionTag, window.remoteVersion);\n      window.location.reload(true);\n    }\n  });\n}\n\nwindow.addEventListener('focus', window.checkLatestVersion, false)\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});\n"],"sourceRoot":""}